package com.nebulacompanies.ibo.activities;

import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.RelativeLayout;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.DefaultItemAnimator;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.gson.Gson;
import com.nebulacompanies.ibo.Network.APIClient;
import com.nebulacompanies.ibo.Network.APIInterface;
import com.nebulacompanies.ibo.ecom.adapter.MyInventoryAdapter;
import com.nebulacompanies.ibo.ecom.model.OrderInventoryModel;
import com.nebulacompanies.ibo.ecom.utils.MyBoldTextViewEcom;
import com.nebulacompanies.ibo.ecom.utils.MyTextViewEcom;
import com.nebulacompanies.ibo.ecom.utils.Utils;
import com.nebulacompanies.ibo.shoppy.R;
import com.nebulacompanies.ibo.util.Constants;
import com.nebulacompanies.ibo.util.Session;

import java.util.ArrayList;

import me.zhanghai.android.materialprogressbar.MaterialProgressBar;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static com.nebulacompanies.ibo.util.Const.REQUEST_STATUS_CODE_ERROR;
import static com.nebulacompanies.ibo.util.Constants.REQUEST_STATUS_CODE_NO_RECORDS;
import static com.nebulacompanies.ibo.util.Constants.REQUEST_STATUS_CODE_SERVICE_UNAVAILABLE;

public class MyInventoryActivity extends AppCompatActivity {

    MyTextViewEcom txtTitle;
    ImageView imgBack;
    RelativeLayout laytoolbar;
    //Error View
    private RelativeLayout llEmpty;
    private ImageView imgError;
    private MyTextViewEcom txtErrorContent, txtRetry;
    MyBoldTextViewEcom txtErrorTitle;
    RecyclerView recList;
    MaterialProgressBar mProgressDialog;
    String userId, iboId;
    Session session;
    private ArrayList<OrderInventoryModel.Datum> inventoryList = new ArrayList<>();
    private MyInventoryAdapter myInventoryAdapter;
    APIInterface mAPIInterface;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_my_inventory);
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
        Utils.darkenStatusBar(this, R.color.colorNotification);
        mAPIInterface = APIClient.getShoppyClient(getApplicationContext()).create(APIInterface.class);
        initUI();

    }

    private void initUI() {
        session = new Session(this);
        userId = session.getShoppyUserID();
        iboId = session.getIboKeyId();
        laytoolbar = findViewById(R.id.toolbarlay);
        txtTitle = findViewById(R.id.toolbar_title1);
        imgBack = findViewById(R.id.img_back);
        recList = findViewById(R.id.recycler_view);
        laytoolbar.setVisibility(View.VISIBLE);
        txtTitle.setText("My Inventory");

        imgBack.setOnClickListener(v -> onBackPressed());

        // Error View
        llEmpty = (RelativeLayout) findViewById(R.id.llEmpty);
        imgError = (ImageView) findViewById(R.id.imgError);
        txtErrorTitle = (MyBoldTextViewEcom) findViewById(R.id.txtErrorTitle);
        txtErrorContent = (MyTextViewEcom) findViewById(R.id.txt_error_content);
        txtRetry = (MyTextViewEcom) findViewById(R.id.txtRetry);
        mProgressDialog = findViewById(R.id.progresbar);
        txtRetry.setOnClickListener(v -> {
            getInventoryList();
        });

        recList = findViewById(R.id.recycler_view);
        getInventoryList();
    }

    private void getInventoryList() {
        if (Utils.isNetworkAvailable(MyInventoryActivity.this)) {

            mProgressDialog.setVisibility(View.VISIBLE);
            Call<OrderInventoryModel> wsCallingEvents = mAPIInterface.getInventoryList(userId, iboId);
            wsCallingEvents.enqueue(new Callback<OrderInventoryModel>() {
                @Override
                public void onResponse(Call<OrderInventoryModel> call, Response<OrderInventoryModel> response) {

                    mProgressDialog.setVisibility(View.GONE);
                    inventoryList.clear();
                    if (response.isSuccessful()) {
                        if (response.code() == 200) {
                            OrderInventoryModel inventoryModel = response.body();
                            if (inventoryModel.getResponse().getStatusCode() == REQUEST_STATUS_CODE_NO_RECORDS) {
                                // noRecordsFound();
                            } else if (inventoryModel.getResponse().getStatusCode() == Constants.REQUEST_STATUS_CODE_SUCCESS) {
                                llEmpty.setVisibility(View.GONE);
                                inventoryList.addAll(inventoryModel.getResponse().getData());
                                final RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(MyInventoryActivity.this);
                                recList.setLayoutManager(mLayoutManager);
                                recList.setItemAnimator(new DefaultItemAnimator());
                                myInventoryAdapter = new MyInventoryAdapter(MyInventoryActivity.this, inventoryList);
                                recList.setAdapter(myInventoryAdapter);

                                Log.e("ORDERListAPI", "ORDERListAPI: " + new Gson().toJson(response.body()));
                            } else if (inventoryModel.getResponse().getStatusCode() == REQUEST_STATUS_CODE_ERROR
                                    || inventoryModel.getResponse().getStatusCode() == REQUEST_STATUS_CODE_SERVICE_UNAVAILABLE) {
                                // serviceUnavailable();
                            }
                            if (inventoryList.size() > 0) {
                                llEmpty.setVisibility(View.GONE);
                                recList.setVisibility(View.VISIBLE);
                            } else {

                                recList.setVisibility(View.GONE);
                                noRecordsFound();
                            }
                        } else if (response.code() == -1) {
                            recList.setVisibility(View.GONE);
                            noRecordsFound();
                        } else {

                            recList.setVisibility(View.GONE);
                            noRecordsFound();
                        }
                    }
                }
                    @Override
                    public void onFailure (Call<OrderInventoryModel > call, Throwable t){

                        mProgressDialog.setVisibility(View.GONE);
                        Log.e("ORDERListAPIError", "ORDERListAPI: " + t);
                        if (t.equals("java.io.IOException: failed to rename")) {
                            recList.setVisibility(View.GONE);
                            //noRecordsFound();
                        } else {
                            recList.setVisibility(View.GONE);
                            noRecordsFound();
                        }
                    }
                });
            } else{
                noInternetAvailable();
            }
        }

        void noRecordsFound () {
            txtErrorTitle.setText("You have not any inventory yet.");
            txtErrorContent.setText("Looks like you have no inventory in your inventory list.");
            imgError.setImageResource(R.drawable.ic_shopping_bag);
            llEmpty.setVisibility(View.VISIBLE);
            txtRetry.setVisibility(View.GONE);
            recList.setVisibility(View.GONE);
        }

        private void noInternetAvailable () {
            recList.setVisibility(View.GONE);
            mProgressDialog.setVisibility(View.GONE);
            imgError.setImageResource(R.drawable.ic_cloud_off_black_24dp);
            txtErrorTitle.setText(R.string.error_title);
            txtErrorContent.setText(R.string.error_content);
            llEmpty.setVisibility(View.VISIBLE);
            txtRetry.setVisibility(View.VISIBLE);
        }
    }