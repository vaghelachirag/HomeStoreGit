package com.nebulacompanies.ibo.activities;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.DefaultItemAnimator;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.google.gson.Gson;
import com.nebulacompanies.ibo.Interface.OnProductAdded;
import com.nebulacompanies.ibo.Network.APIClient;
import com.nebulacompanies.ibo.Network.APIInterface;
import com.nebulacompanies.ibo.ecom.adapter.MyInventoryAdapter;
import com.nebulacompanies.ibo.ecom.adapter.SellInventoryAdapter;
import com.nebulacompanies.ibo.ecom.model.OrderInventoryModel;
import com.nebulacompanies.ibo.ecom.utils.MyBoldTextViewEcom;
import com.nebulacompanies.ibo.ecom.utils.MyButtonEcom;
import com.nebulacompanies.ibo.ecom.utils.MyTextViewEcom;
import com.nebulacompanies.ibo.ecom.utils.Utils;
import com.nebulacompanies.ibo.shoppy.R;
import com.nebulacompanies.ibo.util.Constants;
import com.nebulacompanies.ibo.util.Session;

import java.util.ArrayList;

import me.zhanghai.android.materialprogressbar.MaterialProgressBar;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class SellProductsActivity extends AppCompatActivity implements OnProductAdded {

    MyTextViewEcom txtTitle;
    ImageView imgBack;
    RelativeLayout laytoolbar;
    //Error View
    private RelativeLayout llEmpty;
    private ImageView imgError;
    private MyTextViewEcom txtErrorContent, txtRetry;
    MyBoldTextViewEcom txtErrorTitle;
    RecyclerView recList;
    MaterialProgressBar mProgressDialog;
    Session session;
    MyTextViewEcom textProducts, textPrice, textPV, textNV, textBV;
    String userId, iboId;
    LinearLayout layData;
    private final ArrayList<OrderInventoryModel.Datum> inventoryList = new ArrayList<>();
    private final ArrayList<OrderInventoryModel.Datum> sellList = new ArrayList<>();
    private SellInventoryAdapter sellInventoryAdapter;
    APIInterface mAPIInterface;
    MyButtonEcom btnProceed;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_sell_products);
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
        Utils.darkenStatusBar(this, R.color.colorNotification);
        mAPIInterface = APIClient.getShoppyClient(getApplicationContext()).create(APIInterface.class);

        initUI();
        getSellProductsList();
    }

    private void initUI() {
        session = new Session(this);
        userId = session.getShoppyUserID();
        iboId = session.getIboKeyId();
        laytoolbar = findViewById(R.id.toolbarlay);
        txtTitle = findViewById(R.id.toolbar_title1);
        imgBack = findViewById(R.id.img_back);
        recList = findViewById(R.id.recycler_view);
        laytoolbar.setVisibility(View.VISIBLE);
        txtTitle.setText("Sell my products");

        imgBack.setOnClickListener(v -> onBackPressed());

        // Error View
        llEmpty = (RelativeLayout) findViewById(R.id.llEmpty);
        imgError = (ImageView) findViewById(R.id.imgError);
        txtErrorTitle = (MyBoldTextViewEcom) findViewById(R.id.txtErrorTitle);
        txtErrorContent = (MyTextViewEcom) findViewById(R.id.txt_error_content);
        txtRetry = (MyTextViewEcom) findViewById(R.id.txtRetry);
        btnProceed = findViewById(R.id.proceed);


        textProducts = findViewById(R.id.tv_total_products);
        textPrice = findViewById(R.id.tv_mycart_retail_price);
        textBV = findViewById(R.id.tv_bv_value);
        textNV = findViewById(R.id.tv_nv_price);
        textPV = findViewById(R.id.tv_pv_price);

        mProgressDialog = findViewById(R.id.progresbar);
        layData = findViewById(R.id.laydata);
        txtRetry.setOnClickListener(v -> getSellProductsList());

        recList = findViewById(R.id.recycler_view);
        btnProceed.setOnClickListener(v -> {
            /*sellList.clear();
            for (int i = 0; i < inventoryList.size(); i++) {
                OrderInventoryModel.Datum datum = inventoryList.get(i);
                String prchase = datum.getPurchseQuantity();
                if (!TextUtils.isEmpty(prchase)) {
                    if (!prchase.equals("0")) {
                        Log.d("Purchase:: ", prchase + " : " + i);
                        sellList.add(datum);
                    }
                }
            }*/
            if (sellList.size() > 0) {
                Toast.makeText(this, sellList.size() + " : ", Toast.LENGTH_SHORT).show();

            } else {
                Toast.makeText(this, "Please select product/s to sell", Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void getSellProductsList() {
        if (Utils.isNetworkAvailable(SellProductsActivity.this)) {

            mProgressDialog.setVisibility(View.VISIBLE);
            Call<OrderInventoryModel> wsCallingEvents = mAPIInterface.getInventoryList(userId, iboId);
            wsCallingEvents.enqueue(new Callback<OrderInventoryModel>() {
                @Override
                public void onResponse(Call<OrderInventoryModel> call, Response<OrderInventoryModel> response) {

                    inventoryList.clear();
                    sellList.clear();
                    if (response.isSuccessful()) {
                        if (response.code() == 200) {
                            OrderInventoryModel inventoryModel = response.body();
                            if (inventoryModel.getResponse().getStatusCode() == Constants.REQUEST_STATUS_CODE_SUCCESS) {
                                llEmpty.setVisibility(View.GONE);
                                inventoryList.addAll(inventoryModel.getResponse().getData());
                                inventoryList.addAll(inventoryModel.getResponse().getData());
                                inventoryList.addAll(inventoryModel.getResponse().getData());
                                inventoryList.addAll(inventoryModel.getResponse().getData());
                                inventoryList.addAll(inventoryModel.getResponse().getData());
                                final RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(SellProductsActivity.this);
                                recList.setLayoutManager(mLayoutManager);
                                recList.setItemAnimator(new DefaultItemAnimator());
                                sellInventoryAdapter = new SellInventoryAdapter(SellProductsActivity.this, inventoryList, SellProductsActivity.this);
                                recList.setAdapter(sellInventoryAdapter);

                                Log.e("ORDERListAPI", "ORDERListAPI: " + new Gson().toJson(response.body()));
                            }
                            if (inventoryList.size() > 0) {
                                llEmpty.setVisibility(View.GONE);
                                layData.setVisibility(View.VISIBLE);
                                btnProceed.setVisibility(View.VISIBLE);
                                int qnty = 0;
                                int total = 0;
                                int pv = 0;
                                int nv = 0;
                                int bv = 0;
                                for (int i = 0; i < inventoryList.size(); i++) {
                                    OrderInventoryModel.Datum mdata = inventoryList.get(i);
                                    qnty = qnty + mdata.getQuantity();
                                    total = total + (mdata.getIboPrice() * mdata.getQuantity());
                                    pv = pv + (mdata.getPv() * mdata.getQuantity());
                                    nv = nv + (mdata.getNv() * mdata.getQuantity());
                                    bv = mdata.getBv();
                                }
                                textBV.setText(bv + "%");
                                textNV.setText(String.valueOf(nv));
                                textPV.setText(String.valueOf(pv));
                                textPrice.setText(String.valueOf(total));
                                textProducts.setText(String.valueOf(qnty));

                            } else {
                                noRecordsFound();
                            }
                        } else {
                            noRecordsFound();
                        }
                    } else
                        noRecordsFound();
                    mProgressDialog.setVisibility(View.GONE);
                }

                @Override
                public void onFailure(Call<OrderInventoryModel> call, Throwable t) {
                    mProgressDialog.setVisibility(View.GONE);
                    noRecordsFound();
                }
            });
        } else {
            noInternetAvailable();
        }
    }

    void noRecordsFound() {
        txtErrorTitle.setText("You have not any inventory yet.");
        txtErrorContent.setText("Looks like you have no inventory in your inventory list.");
        imgError.setImageResource(R.drawable.ic_shopping_bag);
        llEmpty.setVisibility(View.VISIBLE);
        txtRetry.setVisibility(View.VISIBLE);
        layData.setVisibility(View.GONE);
        btnProceed.setVisibility(View.GONE);
    }

    private void noInternetAvailable() {
        layData.setVisibility(View.GONE);
        imgError.setImageResource(R.drawable.ic_cloud_off_black_24dp);
        txtErrorTitle.setText(R.string.error_title);
        txtErrorContent.setText(R.string.error_content);
        llEmpty.setVisibility(View.VISIBLE);
        txtRetry.setVisibility(View.VISIBLE);
        btnProceed.setVisibility(View.GONE);
    }

    @Override
    public void onProductSelect(OrderInventoryModel.Datum datum, String q) {
        datum.setPurchseQuantity(q);
        if (sellList.size() > 0) {
            if (q.equals("0")) {
                sellList.remove(datum);
            } else {
                sellList.add(datum);
            }
        } else {
            if (!q.equals("0")) {
                sellList.add(datum);
            }
        }
    }
}