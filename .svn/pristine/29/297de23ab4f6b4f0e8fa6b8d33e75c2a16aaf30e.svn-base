package com.nebulacompanies.ibo.activities;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.DefaultItemAnimator;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.RelativeLayout;

import com.google.gson.Gson;
import com.nebulacompanies.ibo.Network.APIClient;
import com.nebulacompanies.ibo.Network.APIInterface;
import com.nebulacompanies.ibo.ecom.adapter.MyInventoryAdapter;
import com.nebulacompanies.ibo.ecom.adapter.OrderListAdapter;
import com.nebulacompanies.ibo.ecom.model.OrderListModel;
import com.nebulacompanies.ibo.ecom.model.OrderListModelEcom;
import com.nebulacompanies.ibo.ecom.utils.MyBoldTextViewEcom;
import com.nebulacompanies.ibo.ecom.utils.MyTextViewEcom;
import com.nebulacompanies.ibo.ecom.utils.Utils;
import com.nebulacompanies.ibo.shoppy.R;
import com.nebulacompanies.ibo.util.Constants;
import com.nebulacompanies.ibo.util.Session;

import java.util.ArrayList;

import me.zhanghai.android.materialprogressbar.MaterialProgressBar;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static com.nebulacompanies.ibo.util.Const.REQUEST_STATUS_CODE_ERROR;
import static com.nebulacompanies.ibo.util.Constants.REQUEST_STATUS_CODE_NO_RECORDS;
import static com.nebulacompanies.ibo.util.Constants.REQUEST_STATUS_CODE_SERVICE_UNAVAILABLE;

public class MyInventoryActivity extends AppCompatActivity {

    MyTextViewEcom txtTitle;
    ImageView imgBack;
    RelativeLayout laytoolbar;
    //Error View
    private RelativeLayout llEmpty;
    private ImageView imgError;
    private MyTextViewEcom txtErrorContent, txtRetry;
    MyBoldTextViewEcom txtErrorTitle;
    RecyclerView recList;
    MaterialProgressBar mProgressDialog;
    String userId;
    Session session;
    private ArrayList<OrderListModel> orderDetailsListModels = new ArrayList<>();
    private MyInventoryAdapter myInventoryAdapter;
    APIInterface mAPIInterface;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_my_inventory);
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
        Utils.darkenStatusBar(this, R.color.colorNotification);
        initUI();
    }

    private void initUI() {
        session = new Session(this);
        userId = session.getShoppyUserID();
        laytoolbar = findViewById(R.id.toolbarlay);
        txtTitle = findViewById(R.id.toolbar_title1);
        imgBack = findViewById(R.id.img_back);
        recList = findViewById(R.id.recycler_view);
        laytoolbar.setVisibility(View.VISIBLE);
        txtTitle.setText("My Inventory");

        imgBack.setOnClickListener(v -> onBackPressed());

        // Error View
        llEmpty = (RelativeLayout) findViewById(R.id.llEmpty);
        imgError = (ImageView) findViewById(R.id.imgError);
        txtErrorTitle = (MyBoldTextViewEcom) findViewById(R.id.txtErrorTitle);
        txtErrorContent = (MyTextViewEcom) findViewById(R.id.txt_error_content);
        txtRetry = (MyTextViewEcom) findViewById(R.id.txtRetry);
        mProgressDialog = findViewById(R.id.progresbar);
        txtRetry.setOnClickListener(v -> {
            getOrderList();
        });

        recList = findViewById(R.id.recycler_view);
        //getOrderList();
        final RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(MyInventoryActivity.this);
        recList.setLayoutManager(mLayoutManager);
        recList.setItemAnimator(new DefaultItemAnimator());
        myInventoryAdapter = new MyInventoryAdapter(MyInventoryActivity.this);
        recList.setAdapter(myInventoryAdapter);

    }

    private void getOrderList() {
        if (Utils.isNetworkAvailable(MyInventoryActivity.this)) {

            mProgressDialog.setVisibility(View.VISIBLE);

            mAPIInterface = APIClient.getShoppyClient(getApplicationContext()).create(APIInterface.class);
            Call<OrderListModelEcom> wsCallingEvents = mAPIInterface.getOrderListEcom(userId);
            wsCallingEvents.enqueue(new Callback<OrderListModelEcom>() {
                @Override
                public void onResponse(Call<OrderListModelEcom> call, Response<OrderListModelEcom> response) {

                    mProgressDialog.setVisibility(View.GONE);
                    orderDetailsListModels.clear();
                    if (response.isSuccessful()) {
                        if (response.code() == 200) {
                            OrderListModelEcom orderListModelEcom = response.body();
                            if (orderListModelEcom.getResponse().getStatusCode() == REQUEST_STATUS_CODE_NO_RECORDS) {

                            } else if (orderListModelEcom.getResponse().getStatusCode() == Constants.REQUEST_STATUS_CODE_SUCCESS) {
                                llEmpty.setVisibility(View.GONE);
                                //orderDetailsListModels.addAll(orderListModelEcom.getResponse().getData());


                                Log.e("ORDERListAPI", "ORDERListAPI: " + new Gson().toJson(response.body()));
                            } else if (orderListModelEcom.getResponse().getStatusCode() == REQUEST_STATUS_CODE_ERROR
                                    || orderListModelEcom.getResponse().getStatusCode() == REQUEST_STATUS_CODE_SERVICE_UNAVAILABLE) {

                            }
                            if (orderDetailsListModels.size() > 0) {
                                llEmpty.setVisibility(View.GONE);
                                recList.setVisibility(View.VISIBLE);
                            } else {
                                recList.setVisibility(View.GONE);
                                noRecordsFound();
                            }
                        } else {
                            recList.setVisibility(View.GONE);
                            noRecordsFound();
                        }
                    } else if (response.code() == -1) {
                        recList.setVisibility(View.GONE);
                        noRecordsFound();
                    } else {

                        recList.setVisibility(View.GONE);
                        noRecordsFound();
                    }
                }

                @Override
                public void onFailure(Call<OrderListModelEcom> call, Throwable t) {

                    mProgressDialog.setVisibility(View.GONE);
                    Log.e("ORDERListAPIError", "ORDERListAPI: " + t);
                    if (t.equals("java.io.IOException: failed to rename")) {
                        recList.setVisibility(View.GONE);

                    } else {
                        recList.setVisibility(View.GONE);
                        noRecordsFound();
                    }

                }
            });
        } else {
            noInternetAvailable();
        }
    }


    void noRecordsFound() {
        txtErrorTitle.setText("You have not any inventory yet.");
        txtErrorContent.setText("Looks like you have no inventory in your inventory list.");
        imgError.setImageResource(R.drawable.ic_shopping_bag);
        llEmpty.setVisibility(View.VISIBLE);
        txtRetry.setVisibility(View.GONE);
        recList.setVisibility(View.GONE);
    }

    private void noInternetAvailable() {
        recList.setVisibility(View.GONE);
        mProgressDialog.setVisibility(View.GONE);
        imgError.setImageResource(R.drawable.ic_cloud_off_black_24dp);
        txtErrorTitle.setText(R.string.error_title);
        txtErrorContent.setText(R.string.error_content);
        llEmpty.setVisibility(View.VISIBLE);
        txtRetry.setVisibility(View.VISIBLE);
    }
}