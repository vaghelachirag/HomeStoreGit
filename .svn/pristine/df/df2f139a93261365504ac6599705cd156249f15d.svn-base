package com.nebulacompanies.ibo.ecom.adapter;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.content.Context;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.text.InputFilter;
import android.text.Spanned;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;

import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.nebulacompanies.ibo.ecom.model.OrderInventoryModel;
import com.nebulacompanies.ibo.ecom.utils.MyTextViewEcom;
import com.nebulacompanies.ibo.shoppy.R;

import java.util.ArrayList;
import java.util.Random;

import butterknife.BindView;
import butterknife.ButterKnife;

public class SellInventoryAdapter extends RecyclerView.Adapter<SellInventoryAdapter.MyViewHolder> {

    private Context context;
    ArrayList<OrderInventoryModel.Datum> detailsListModels;
    AlertDialog dialogDetails;
    AlertDialog.Builder builder;
    ImageView imgClose;
    EditText editTextQuantity;
    RecyclerView recyclerView;

    public class MyViewHolder extends RecyclerView.ViewHolder {

        @BindView(R.id.tv_inventory_product_name)
        MyTextViewEcom tvInventoryProName;

        @BindView(R.id.tv_inventory_item_price)
        MyTextViewEcom tvInventoryItemPrice;

        @BindView(R.id.product_count)
        MyTextViewEcom tvInventoryProductCount;

        @BindView(R.id.tv_mycart_tablet)
        MyTextViewEcom tvMyCartTablet;

        @BindView(R.id.thumbnail)
        ImageView thumbnail;

        @BindView(R.id.img_my_cart_delete)
        ImageView imgDelete;

        @BindView(R.id.inventory_view)
        CardView cardView;

        @BindView(R.id.tv_pv_value)
        MyTextViewEcom tvInventoryPV;

        @BindView(R.id.tv_nv_value)
        MyTextViewEcom tvInventoryNV;

        @BindView(R.id.tv_bv_value)
        MyTextViewEcom tvInventoryBV;

        @BindView(R.id.tv_original_price_value)
        MyTextViewEcom tvMRPPrice;

        @BindView(R.id.txtreward)
        MyTextViewEcom txtReward;

        @BindView(R.id.product_size)
        MyTextViewEcom textPurchaseQuantity;

        @BindView(R.id.ln_size)
        RelativeLayout relPurchase;

        public MyViewHolder(View view) {
            super(view);
            ButterKnife.bind(this, view);
        }
    }

    @SuppressLint("HardwareIds")
    public SellInventoryAdapter(Context context, ArrayList<OrderInventoryModel.Datum> detailsListModels) {
        this.context = context;
        this.detailsListModels = detailsListModels;
        alertBoxTicketDetail();
    }

    public void alertBoxTicketDetail() {

        builder = new AlertDialog.Builder(context);

        // set the custom layout
        final View customLayout = LayoutInflater.from(context).inflate(R.layout.dialog_product_quntity, null);
        builder.setView(customLayout);
        imgClose = customLayout.findViewById(R.id.img_ticket_close);
        editTextQuantity = customLayout.findViewById(R.id.edit_quantity);
        recyclerView = customLayout.findViewById(R.id.recycler_view_q);

        recyclerView.setLayoutManager(new LinearLayoutManager(context));

/*
        imgClose = customLayout.findViewById(R.id.img_ticket_close);
        tvSubject = customLayout.findViewById(R.id.tv_subject);
        tvTicketCategory = customLayout.findViewById(R.id.tv_ticket_category);
        tvOrderId = customLayout.findViewById(R.id.tv_order_id);
        lyOrderId = customLayout.findViewById(R.id.ly_order);
        cardSubject = customLayout.findViewById(R.id.card_subject);

        tvSubject.setText(subject);
        tvTicketCategory.setText(ticketCategoryName);

        cardSubject.setVisibility(TextUtils.isEmpty(subject) ? View.GONE : View.VISIBLE);

        Log.d("orderId", ":" + orderId);
        if (TextUtils.isEmpty(orderId)) {
            lyOrderId.setVisibility(View.GONE);
        } else {
            lyOrderId.setVisibility(View.VISIBLE);
            String orderDate = utils.convertDateMonth(ticketData.getOrderDateINLong());
            tvOrderId.setText(orderId + " [" + orderDate + "]");
        }*/
        dialogDetails = builder.create();
        dialogDetails.setCancelable(false);

        imgClose.setOnClickListener(v -> dialogDetails.dismiss());

    }

    @Override
    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View itemView = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.my_inventory_sell_list_item, parent, false);

        return new MyViewHolder(itemView);
    }


    @Override
    public void onBindViewHolder(MyViewHolder holder, int position) {
        OrderInventoryModel.Datum datum = detailsListModels.get(position);
        int quantity = 100;//datum.getQuantity();
        int pv = datum.getPv();
        int nv = datum.getNv();
        holder.tvInventoryProName.setText(datum.getProductName());
        holder.tvMyCartTablet.setText(datum.getShortDescription());
        holder.tvMRPPrice.setText("(" + (datum.getIboPrice()) + " Ã— " + quantity + ")");
        holder.tvInventoryItemPrice.setText(String.valueOf(datum.getIboPrice() * quantity));
        //pv calc
        holder.tvInventoryPV.setText(String.valueOf(quantity * pv));
        holder.tvInventoryNV.setText(String.valueOf(quantity * nv));
        //bv calculation
        holder.tvInventoryBV.setText(datum.getBv() + "%");
        holder.tvInventoryProductCount.setText(String.valueOf(datum.getQuantity()));

        Glide.with(context)
                .load(datum.getImage()).fitCenter()
                .diskCacheStrategy(DiskCacheStrategy.ALL)
                .placeholder(getRandomDrawbleColor())
                .into(holder.thumbnail);
        holder.relPurchase.setOnClickListener(v -> {
            //if (quantity > 1) {
                editTextQuantity.requestFocus();
                ArrayList<String> datalist = new ArrayList<>();
                for (int i = 0; i <= quantity; i++) {
                    datalist.add(String.valueOf(i));
                }
                CustomAdapter customAdapter = new CustomAdapter(context, datalist);
                recyclerView.setAdapter(customAdapter);
                setEditTextMaxLength(datalist,String.valueOf(quantity).length());
                dialogDetails.show();
           // } else {
           //     holder.textPurchaseQuantity.setText("1");
          //  }
        });
    }
    public void setEditTextMaxLength(ArrayList<String> datalist,int length) {
        InputFilter[] digitsfilters = new InputFilter[1];
        digitsfilters[0] = (source, start, end, dest, dstart, dend) -> {
            // TODO Auto-generated method stub
            Log.d("Length::",dstart+"<"+length+" : dstart<length");
            if(dstart<length) {
                if (dstart >= 0) {
                    Log.d("Length::",dstart+">=0");
                    String str = "";
                    for (int index = start; index < end; index++) {
                        str.concat((String) source);

                    }
                    Log.d("Length::",str);

                    if (!datalist.contains(str)) {
                        return "";
                    }
                }else
                    return "";
            }else
                return "";
            return null;
        };
        //digitsfilters[1] = new InputFilter.LengthFilter(length);
        editTextQuantity.setFilters(digitsfilters);

       /* InputFilter[] filterArray = new InputFilter[1];
        filterArray[0] = new InputFilter.LengthFilter(length);
        editTextQuantity.setFilters(filterArray);*/
    }
    private ColorDrawable[] vibrantLightColorList =
            {
                    new ColorDrawable(Color.parseColor("#9ACCCD")), new ColorDrawable(Color.parseColor("#8FD8A0")),
                    new ColorDrawable(Color.parseColor("#CBD890")), new ColorDrawable(Color.parseColor("#DACC8F")),
                    new ColorDrawable(Color.parseColor("#D9A790")), new ColorDrawable(Color.parseColor("#D18FD9")),
                    new ColorDrawable(Color.parseColor("#FF6772")), new ColorDrawable(Color.parseColor("#DDFB5C"))
            };


    public ColorDrawable getRandomDrawbleColor() {
        int idx = new Random().nextInt(vibrantLightColorList.length);
        return vibrantLightColorList[idx];
    }


    @Override
    public int getItemCount() {
        return detailsListModels.size();
    }


    public class CustomAdapter extends RecyclerView.Adapter<CustomAdapter.MyViewHolder> {

        private LayoutInflater inflater;
        private Context context;
        ArrayList<String> mdatalist;

        public CustomAdapter(Context context, ArrayList<String> mdatalist) {
            inflater = LayoutInflater.from(context);
            this.context = context;
            this.mdatalist = mdatalist;
        }

        @Override
        public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            View view = inflater.inflate(R.layout.custom_layout, parent, false);
            MyViewHolder holder = new MyViewHolder(view);
            return holder;
        }

        @Override
        public void onBindViewHolder(MyViewHolder holder, int position) {
            holder.serial_number.setText(mdatalist.get(position));
        }

        @Override
        public int getItemCount() {
            return mdatalist.size();
        }

        class MyViewHolder extends RecyclerView.ViewHolder {
            MyTextViewEcom serial_number;

            public MyViewHolder(View itemView) {
                super(itemView);
                serial_number = itemView.findViewById(R.id.tv_subject);
            }
        }
    }

}
